name: Solar System Workflow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

# production db            
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
    MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          # label of the service container
            mongo-db:
              # here I should use a ':non-prod' image db (I haven't create it yet)
              image: daliaabbruciati/solar-system:6a9d0c8b6ecb4ef948f8f79f175bb1b9a2115096
              ports:
                - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [18, 19, 20]
            os: [ubuntu-latest, macos-latest]
            exclude:
                - nodejs_version: 19
                - os: macos-latest

        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.nodejs_version }}

            # caching npm dependecies
            - name: Cahce NPM Dependecies
              uses: actions/cache@v3
              with: 
                path: node_modules # where to pick up the dependencies
                key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

            - name: Install dependencies
              run: npm install

            - name: Run tests
              id: nodejs-unit-testing-step
              run: npm run test

            - name: Archive Test result
              # to retrive output from the previous step (in our case Run tests)
              if: steps.nodejs-unit-testing-step.outcome == 'failure'
              uses: actions/upload-artifact@v3
              with:
                  name: Mocha-Test-Result
                  path: test-results.xml
    
    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup NodeJS Version - 18
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            # caching npm dependecies
            - name: Cahce NPM Dependecies
              uses: actions/cache@v3
              with: 
                path: node_modules # where to pick up the dependencies
                key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          
            - name: Install dependencies
              run: npm install

            - name: Check code coverage
              continue-on-error: true
              run: npm run coverage

            - name: Archive Test result
              uses: actions/upload-artifact@v3
              with:
                  name: Code-coverage-Result
                  path: coverage
                  retention-days: 5

    docker: 
      name: Containerization
      needs: [unit-testing, code-coverage]
      # permission to also write on the ghcr
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Dockerhub login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: GHCR login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Build a NON-PROD image for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:non-prod

        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live
        
        - name: Docker Image NON-PROD Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3001:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:non-prod

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3001/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
             ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
             ${{ vars.DOCKERHUB_USERNAME }}/solar-system:non-prod
             ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
